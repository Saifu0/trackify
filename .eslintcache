[{"/home/saifu/Documents/Trackify/src/index.tsx":"1","/home/saifu/Documents/Trackify/src/store/store.ts":"2","/home/saifu/Documents/Trackify/src/components/Dashboard/Category/Category.tsx":"3","/home/saifu/Documents/Trackify/src/components/Dashboard/Modal/Modal.tsx":"4","/home/saifu/Documents/Trackify/src/components/Navigations/AuthenticationNavigation.tsx":"5","/home/saifu/Documents/Trackify/src/components/Home/index.tsx":"6"},{"size":500,"mtime":1613448963946,"results":"7","hashOfConfig":"8"},{"size":215,"mtime":1614358566812,"results":"9","hashOfConfig":"8"},{"size":447,"mtime":1613448963942,"results":"10","hashOfConfig":"8"},{"size":4935,"mtime":1613813861437,"results":"11","hashOfConfig":"8"},{"size":1710,"mtime":1613448963946,"results":"12","hashOfConfig":"8"},{"size":234,"mtime":1613448963946,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qdewc1",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/saifu/Documents/Trackify/src/index.tsx",[],"/home/saifu/Documents/Trackify/src/store/store.ts",[],["28","29"],"/home/saifu/Documents/Trackify/src/components/Dashboard/Category/Category.tsx",[],"/home/saifu/Documents/Trackify/src/components/Dashboard/Modal/Modal.tsx",["30"],"import React from 'react';\nimport axios from 'axios';\nimport moment from \"moment\";\nimport { Form, Input, Button, DatePicker, Select, Tag } from 'antd';\n\nconst { Option } = Select;\n\ninterface Props {\n    id? : number;\n    status? : string;\n    company? : string;\n    position? : string;\n    date? : string;\n    notes? : string;\n    update? : boolean;\n}\n\nconst DumbModal = ( props : Props ) => {\n\n    const [referesh, setRefresh ] = React.useState(undefined)\n\n    const layout = {\n        labelCol: { span: 6 },\n        wrapperCol: { span: 20 },\n    };\n\n    const dateFormat = 'YYYY/MM/DD';\n\n    const onFinish = (values: any) => {\n        const date = moment(values.applied_date).format(\"YYYY-MM-DD\")\n        const token = sessionStorage.getItem(\"token\");\n\n\n        const bodyParameters = {\n          company : (values.company===undefined ? props.company : values.company),\n          role : (values.position === undefined ? props.position : values.position),\n          status : (values.status===undefined ? props.status : values.status),\n          notes : (values.notes===undefined ? props.notes : values.notes),\n          applied_date : date\n        }\n\n        console.log(bodyParameters)\n\n        const config = {\n            headers: { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' },\n        };\n        if(props.update===false){\n            axios.post('/api/create',bodyParameters,config)\n              .then(res => {\n                console.log(\"Status\",res.data);\n                window.location.reload();\n              })\n              .catch(err => {\n                console.log(err.message)\n              })\n        }else{\n            const updatedBody = {...bodyParameters, id : props.id }\n            axios.post('/api/update',updatedBody,config)\n              .then(res => {\n                console.log(\"Status\",res.data)\n                window.location.reload();\n              })\n              .catch(err => {\n                console.log(err.message)\n              })\n        }\n\n        // console.log('Success:', values);\n    };\n\n    const onFinishFailed = (errorInfo: any) => {\n        console.log('Failed:', errorInfo);\n    };\n\n    const onChange = (date : any, dateString : any ) =>{\n        console.log(date, dateString);\n    }\n\n    const handleChange = (value : string ) => {\n        console.log(`selected ${value}`);\n    }\n\n    return (\n        <Form\n            {...layout}\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n        >\n            <Form.Item\n                label=\"Company Name\"\n                name=\"company\"\n                rules={[{ required: !props.update, message: 'Please enter company!' }]}\n            >\n                <Input defaultValue={props.company}/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Position\"\n                name=\"position\"\n                rules={[{ required: !props.update, message: 'Please enter position!' }]}\n            >\n                <Input defaultValue={props.position}/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Extra Notes\"\n                name=\"notes\"\n            >\n                <Input.TextArea defaultValue={props.notes}/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Date\"\n                name=\"applied_date\"\n            >\n                <DatePicker\n                    defaultValue={moment('2021/02/14',dateFormat)}\n                    onChange={onChange}\n                    format={dateFormat}\n                />\n            </Form.Item>\n\n            <Form.Item\n                label=\"Status\"\n                name=\"status\"\n            >\n                <Select defaultValue={props.status} style={{ width: 120 }} onChange={handleChange}>\n                    <Option value=\"to apply\">\n                        <Tag color=\"gold\">\n                            To apply\n                        </Tag>\n                    </Option>\n\n                    <Option value=\"applied\">\n                        <Tag color=\"blue\">\n                            Applied\n                        </Tag>\n                    </Option>\n\n                    <Option value=\"ongoing\">\n                        <Tag color=\"magenta\">\n                            On going\n                        </Tag>\n                    </Option>\n\n                    <Option value=\"rejected\">\n                        <Tag color=\"red\">\n                            Rejected\n                        </Tag>\n                    </Option>\n\n                    <Option value=\"offer\">\n                        <Tag color=\"green\">\n                            Offer\n                        </Tag>\n                    </Option>\n                </Select>\n            </Form.Item>\n\n            <Form.Item>\n                <Button htmlType=\"submit\" onClick={() => setRefresh(undefined)}>Apply</Button>\n            </Form.Item>\n        </Form>\n    )\n}\n\nexport default DumbModal\n","/home/saifu/Documents/Trackify/src/components/Navigations/AuthenticationNavigation.tsx",[],"/home/saifu/Documents/Trackify/src/components/Home/index.tsx",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":20,"column":12,"nodeType":"37","messageId":"38","endLine":20,"endColumn":20},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"@typescript-eslint/no-unused-vars","'referesh' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]